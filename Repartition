IRC :

A ‚Äî Gestion des connexions et des clients (c√¥t√© bas-niveau / serveur)
Responsable de la couche serveur et de la gestion des clients :

Server.cpp / Server.hpp

Acceptation des connexions (socket, bind, listen, accept)

Multiplexing I/O avec poll() ou select()

Parsing des requ√™tes basiques

Authentification via mot de passe

Client.cpp / Client.hpp

Cr√©ation et gestion de la structure client (file descriptor, nickname, √©tat, etc.)

Gestion des buffers (lecture/√©criture non-bloquante)

Gestion des sockets et de la logique r√©seau

Impl√©mentation de commandes de connexion :

PASS, NICK, USER, QUIT, PING, PONG

 Objectif : Offrir une base robuste qui g√®re la communication r√©seau et l‚Äô√©tat de chaque client.

üîπB ‚Äî Gestion des canaux, commandes IRC et logique applicative
Responsable de la logique IRC (protocoles et structures de donn√©es) :

Channel.cpp / Channel.hpp

Cr√©ation, suppression, ajout/retrait de membres

Droits des op√©rateurs

IrcMessageBuilder.cpp / IrcMessageBuilder.hpp + IrcNumericReplies.hpp

Construction des messages IRC valides

Codes de r√©ponse (001, 403, etc.)

Impl√©mentation des commandes :

JOIN, PART, TOPIC, KICK, INVITE, MODE, PRIVMSG, NOTICE

Gestion des droits, op√©rateurs, modes de canal

Bonus : Bot.hpp / Bot.cpp si vous visez les bonus

Objectif : G√©rer les interactions utilisateurs et les fonctionnalit√©s IRC principales.
